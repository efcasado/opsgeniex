# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.DeprecatedPolicy do
  @moduledoc """
  API calls for all endpoints tagged `DeprecatedPolicy`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Change Alert Policy Order
  Change execution order of the alert policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `body` (DeprecatedChangeAlertPolicyOrderPayload): Change order payload
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec change_alert_policy_order(Tesla.Env.client, String.t, Opsgeniex.Model.DeprecatedChangeAlertPolicyOrderPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def change_alert_policy_order(connection, policy_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/policies/#{policy_id}/change-order")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Alert Policy
  Creates a new alert policy

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (DeprecatedAlertPolicy): Payload of created alert policy
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.DeprecatedCreateAlertPolicyResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_alert_policy(Tesla.Env.client, Opsgeniex.Model.DeprecatedAlertPolicy.t, keyword()) :: {:ok, Opsgeniex.Model.DeprecatedCreateAlertPolicyResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def create_alert_policy(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/policies")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.DeprecatedCreateAlertPolicyResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Alert Policy
  Delete alert policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_alert_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_alert_policy(connection, policy_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/policies/#{policy_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Disable Alert Policy
  Disable the alert policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec disable_alert_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def disable_alert_policy(connection, policy_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/policies/#{policy_id}/disable")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Enable Alert Policy
  Enable the alert policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec enable_alert_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def enable_alert_policy(connection, policy_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/policies/#{policy_id}/enable")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Alert Policy
  Used to get details of a single policy with id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.DeprecatedGetAlertPolicyResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_alert_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.DeprecatedGetAlertPolicyResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_alert_policy(connection, policy_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/policies/#{policy_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.DeprecatedGetAlertPolicyResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alert Policies
  Returns list alert policies

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.DeprecatedListAlertPoliciesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_alert_policies_v1(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.DeprecatedListAlertPoliciesResponse.t} | {:error, Tesla.Env.t}
  def list_alert_policies_v1(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/policies")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.DeprecatedListAlertPoliciesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Alert Policy
  Update alert policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `body` (DeprecatedAlertPolicy): Payload of updated alert policy
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_alert_policy(Tesla.Env.client, String.t, Opsgeniex.Model.DeprecatedAlertPolicy.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_alert_policy(connection, policy_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/v1/policies/#{policy_id}")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
