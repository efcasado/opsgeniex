# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.NotificationRuleStep do
  @moduledoc """
  API calls for all endpoints tagged `NotificationRuleStep`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Create Notification Rule Step
  Creates a new notification rule step

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `body` (CreateNotificationRuleStepPayload): Request payload to create notification rule step
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_notification_rule_step(Tesla.Env.client, String.t, String.t, Opsgeniex.Model.CreateNotificationRuleStepPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def create_notification_rule_step(connection, identifier, rule_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Notification Rule Step
  Deletes a notification rule step using user identifier, rule id, notification rule step id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `id` (String.t): Id of the rule step will be changed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_notification_rule_step(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_notification_rule_step(connection, identifier, rule_id, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Disable Notification Rule Step
  Disables a new notification rule step

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `id` (String.t): Id of the rule step will be changed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec disable_notification_rule_step(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def disable_notification_rule_step(connection, identifier, rule_id, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps/#{id}/disable")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Enable Notification Rule Step
  Enables a new notification rule step

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `id` (String.t): Id of the rule step will be changed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec enable_notification_rule_step(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def enable_notification_rule_step(connection, identifier, rule_id, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps/#{id}/enable")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Notification Rule Step
  Returns notification rule step with given user identifier and rule id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `id` (String.t): Id of the rule step will be changed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.GetNotificationRuleStepResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_notification_rule_step(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetNotificationRuleStepResponse.t} | {:error, Tesla.Env.t}
  def get_notification_rule_step(connection, identifier, rule_id, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetNotificationRuleStepResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Notification Rule Steps
  Returns list of notification rule steps

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListNotificationRuleStepsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_notification_rule_steps(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ListNotificationRuleStepsResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_notification_rule_steps(connection, identifier, rule_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListNotificationRuleStepsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Notification Rule Step (Partial)
  Update a notification rule step with given user identifier, rule id, and notification rule step id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `rule_id` (String.t): Id of the notification rule that step will belong to.
  - `id` (String.t): Id of the rule step will be changed.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateNotificationRuleStepPayload): Request payload of update schedule action

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_notification_rule_step(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_notification_rule_step(connection, identifier, rule_id, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v2/users/#{identifier}/notification-rules/#{rule_id}/steps/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
