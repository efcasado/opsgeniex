# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.Schedule do
  @moduledoc """
  API calls for all endpoints tagged `Schedule`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Create Schedule
  Creates a new schedule

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (CreateSchedulePayload): Request payload of created schedule
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.CreateScheduleResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_schedule(Tesla.Env.client, Opsgeniex.Model.CreateSchedulePayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.CreateScheduleResponse.t} | {:error, Tesla.Env.t}
  def create_schedule(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/schedules")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.CreateScheduleResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Schedule
  Delete schedule with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_schedule(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/schedules/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Export Schedule
  Returns an .ics file as byte array

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec export_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, binary()} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def export_schedule(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}.ics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Schedule
  Returns schedule with given id or name

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetScheduleResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetScheduleResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_schedule(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetScheduleResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Schedule Timeline
  Returns schedule timeline with given id or name

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
    - `:expand` ([String.t]): Returns more detailed response with expanding it. Possible values are 'base', 'forwarding', and 'override' which is also returned with expandable field of response
    - `:interval` (integer()): Length of time as integer in intervalUnits to retrieve the timeline. Default value is 1
    - `:intervalUnit` (String.t): Unit of the time to retrieve the timeline. Available values are 'days', 'weeks' and 'months'. Default value is 'weeks'
    - `:date` (DateTime.t): Time to return future date on-call participants. Default date is the moment of the time that request is received

  ### Returns

  - `{:ok, Opsgeniex.Model.GetScheduleTimelineResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_schedule_timeline(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetScheduleTimelineResponse.t} | {:error, Tesla.Env.t}
  def get_schedule_timeline(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :expand => :query,
      :interval => :query,
      :intervalUnit => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/timeline")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetScheduleTimelineResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Schedules
  Returns list of schedule

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:expand` ([String.t]): Returns more detailed response with expanding it. Possible value is 'rotation' which is also returned with expandable field of response

  ### Returns

  - `{:ok, Opsgeniex.Model.ListSchedulesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_schedules(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListSchedulesResponse.t} | {:error, Tesla.Env.t}
  def list_schedules(connection, opts \\ []) do
    optional_params = %{
      :expand => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListSchedulesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Schedule (Partial)
  Update schedule with given id or name

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
    - `:body` (UpdateSchedulePayload): Request payload of update schedule action

  ### Returns

  - `{:ok, Opsgeniex.Model.UpdateScheduleResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.UpdateScheduleResponse.t} | {:error, Tesla.Env.t}
  def update_schedule(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v2/schedules/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.UpdateScheduleResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
