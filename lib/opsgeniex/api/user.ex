# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.User do
  @moduledoc """
  API calls for all endpoints tagged `User`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Create User
  Creates a user with the given payload

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (CreateUserPayload): Request payload of the user object
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_user(Tesla.Env.client, Opsgeniex.Model.CreateUserPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def create_user(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/users")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete User
  Delete user with the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_user(connection, identifier, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v2/users/#{identifier}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get User
  Get user for the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters
    - `:expand` ([String.t]): Comma separated list of strings to create a more detailed response. The only expandable field for user api is 'contact'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetUserResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetUserResponse.t} | {:error, Tesla.Env.t}
  def get_user(connection, identifier, opts \\ []) do
    optional_params = %{
      :expand => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetUserResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List User Escalations
  List escalations of the user for the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListUserEscalationsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_user_escalations(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListUserEscalationsResponse.t} | {:error, Tesla.Env.t}
  def list_user_escalations(connection, identifier, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}/escalations")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListUserEscalationsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List User Forwarding Rules
  List user forwarding rules for the given user identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListUserForwardingRulesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_user_forwarding_rules(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ListUserForwardingRulesResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_user_forwarding_rules(connection, identifier, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}/forwarding-rules")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListUserForwardingRulesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List User Schedules
  List schedules of the user for the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListUserSchedulesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_user_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ListUserSchedulesResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_user_schedules(connection, identifier, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}/schedules")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListUserSchedulesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List User Teams
  List user teams for the given user identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListUserTeamsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_user_teams(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ListUserTeamsResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_user_teams(connection, identifier, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/users/#{identifier}/teams")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListUserTeamsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List users
  List users with given parameters

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:limit` (integer()): Number of users to retrieve
    - `:offset` (integer()): Number of users to skip from start
    - `:sortField` (String.t): Field to use in sorting. Should be one of 'username', 'fullName' and 'insertedAt'
    - `:order` (String.t): Direction of sorting. Should be one of 'asc' or 'desc'
    - `:query` (String.t): Field:value combinations with most of user fields to make more advanced searches. Possible fields are username, fullName, blocked, verified, role, locale, timeZone, userAddress and createdAt

  ### Returns

  - `{:ok, Opsgeniex.Model.ListUsersResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_users(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ListUsersResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_users(connection, opts \\ []) do
    optional_params = %{
      :limit => :query,
      :offset => :query,
      :sortField => :query,
      :order => :query,
      :query => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/users")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListUsersResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update User (Partial)
  Update user with the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user to be searched
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateUserPayload): Request payload of the user object

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_user(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_user(connection, identifier, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v2/users/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
