# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.Alert do
  @moduledoc """
  API calls for all endpoints tagged `Alert`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Acknowledge Alert
  Acknowledges alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:body` (AcknowledgeAlertPayload): Request payload of acknowledging alert action

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec acknowledge_alert(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def acknowledge_alert(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/acknowledge")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Add Alert Attachment
  Add Alert Attachment to related alert

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `file` (String.t): Attachment file to be uploaded
  - `opts` (keyword): Optional parameters
    - `:alertIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:user` (String.t): Display name of the request owner
    - `:indexFile` (String.t): Name of html file which will be shown when attachment clicked on UI

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_attachment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def add_attachment(connection, identifier, file, opts \\ []) do
    optional_params = %{
      :alertIdentifierType => :query,
      :user => :form,
      :indexFile => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/attachments")
      |> add_param(:file, :file, file)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Add Details
  Add details to the alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (AddDetailsToAlertPayload): Request payload of adding alert details action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_details(Tesla.Env.client, String.t, Opsgeniex.Model.AddDetailsToAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def add_details(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/details")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Add Note
  Adds note to alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (AddNoteToAlertPayload): Request payload of adding note to alert action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_note(Tesla.Env.client, String.t, Opsgeniex.Model.AddNoteToAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def add_note(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/notes")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Add Tags
  Add tags to the alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (AddTagsToAlertPayload): Request payload of creating alert tags action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_tags(Tesla.Env.client, String.t, Opsgeniex.Model.AddTagsToAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def add_tags(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/tags")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Add Team
  Add team to alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (AddTeamToAlertPayload): Request payload of adding team to alert action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_team(Tesla.Env.client, String.t, Opsgeniex.Model.AddTeamToAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def add_team(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/teams")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Assign Alert
  Assign alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (AssignAlertPayload): Request payload of assigning alert action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec assign_alert(Tesla.Env.client, String.t, Opsgeniex.Model.AssignAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def assign_alert(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/assign")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Close Alert
  Closes alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:body` (CloseAlertPayload): Request payload of closing alert action

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec close_alert(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def close_alert(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/close")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Alert
  Creates a new alert

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (CreateAlertPayload): Request payload of created alert
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_alert(Tesla.Env.client, Opsgeniex.Model.CreateAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def create_alert(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Saved Search
  Create saved search with given fields

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (CreateSavedSearchPayload): Request payload of creating saved search
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.CreateSavedSearchResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_saved_searches(Tesla.Env.client, Opsgeniex.Model.CreateSavedSearchPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.CreateSavedSearchResponse.t} | {:error, Tesla.Env.t}
  def create_saved_searches(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/saved-searches")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.CreateSavedSearchResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Alert
  Deletes an alert using alert id, tiny id or alias

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:user` (String.t): Display name of the request owner
    - `:source` (String.t): Display name of the request source

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_alert(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_alert(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :user => :query,
      :source => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/alerts/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Saved Search
  Deletes saved search using given search identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the saved search which could be 'id' or 'name'
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_saved_search(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_saved_search(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/alerts/saved-searches/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Escalate Alert
  Escalate alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (EscalateAlertToNextPayload): Request payload of escalating alert action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec escalate_alert(Tesla.Env.client, String.t, Opsgeniex.Model.EscalateAlertToNextPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def escalate_alert(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/escalate")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Custom Alert Action
  Custom actions for the alert

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `action_name` (String.t): Name of the action to execute
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:body` (ExecuteCustomAlertActionPayload): Request payload of executing custom alert action

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec execute_custom_alert_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def execute_custom_alert_action(connection, identifier, action_name, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/actions/#{action_name}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Alert
  Returns alert with given id, tiny id or alias

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetAlertResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_alert(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetAlertResponse.t} | {:error, Tesla.Env.t}
  def get_alert(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetAlertResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Alert Attachment
  Get alert attachment name and url for the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `attachment_id` (integer()): Identifier of alert attachment
  - `opts` (keyword): Optional parameters
    - `:alertIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetAlertAttachmentResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_attachment(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Opsgeniex.Model.GetAlertAttachmentResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_attachment(connection, identifier, attachment_id, opts \\ []) do
    optional_params = %{
      :alertIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/#{identifier}/attachments/#{attachment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetAlertAttachmentResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Request Status of Alert
  Used to track the status and alert details (if any) of the request whose identifier is given

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `request_id` (String.t): Universally unique identifier of the questioned request
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.GetRequestStatusResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_request_status(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetRequestStatusResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_request_status(connection, request_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/requests/#{request_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetRequestStatusResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Saved Search
  Get saved search for the given search identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the saved search which could be 'id' or 'name'
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetSavedSearchResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_saved_search(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetSavedSearchResponse.t} | {:error, Tesla.Env.t}
  def get_saved_search(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/saved-searches/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetSavedSearchResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alerts
  Returns list of alerts

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): Search query to apply while filtering the alerts
    - `:searchIdentifier` (String.t): Identifier of the saved search query to apply while filtering the alerts
    - `:searchIdentifierType` (String.t): Identifier type of the saved search query. Possible values are 'id', or 'name'
    - `:offset` (integer()): Start index of the result set (to apply pagination). Minimum value (and also default value) is 0
    - `:limit` (integer()): Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
    - `:sort` (String.t): Name of the field that result set will be sorted by
    - `:order` (String.t): Sorting order of the result set

  ### Returns

  - `{:ok, Opsgeniex.Model.ListAlertsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_alerts(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ListAlertsResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_alerts(connection, opts \\ []) do
    optional_params = %{
      :query => :query,
      :searchIdentifier => :query,
      :searchIdentifierType => :query,
      :offset => :query,
      :limit => :query,
      :sort => :query,
      :order => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListAlertsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alert Attachments
  List alert attachment names and urls for related alert

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:alertIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.ListAlertAttachmentsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_attachments(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListAlertAttachmentsResponse.t} | {:error, Tesla.Env.t}
  def list_attachments(connection, identifier, opts \\ []) do
    optional_params = %{
      :alertIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/#{identifier}/attachments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListAlertAttachmentsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alert Logs
  List alert logs for the given alert identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:offset` (String.t): Starting value of the offset property
    - `:direction` (String.t): Page direction to apply for the given offset with 'next' and 'prev'
    - `:limit` (integer()): Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
    - `:order` (String.t): Sorting order of the result set

  ### Returns

  - `{:ok, Opsgeniex.Model.ListAlertLogsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_logs(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListAlertLogsResponse.t} | {:error, Tesla.Env.t}
  def list_logs(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :offset => :query,
      :direction => :query,
      :limit => :query,
      :order => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/#{identifier}/logs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListAlertLogsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alert Notes
  List alert notes for the given alert identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:offset` (String.t): Starting value of the offset property
    - `:direction` (String.t): Page direction to apply for the given offset with 'next' and 'prev'
    - `:limit` (integer()): Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
    - `:order` (String.t): Sorting order of the result set

  ### Returns

  - `{:ok, Opsgeniex.Model.ListAlertNotesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_notes(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ListAlertNotesResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_notes(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :offset => :query,
      :direction => :query,
      :limit => :query,
      :order => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/#{identifier}/notes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListAlertNotesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alert Recipients
  List alert recipients for the given alert identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.ListAlertRecipientsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_recipients(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListAlertRecipientsResponse.t} | {:error, Tesla.Env.t}
  def list_recipients(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/#{identifier}/recipients")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListAlertRecipientsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Lists Saved Searches
  List all saved searches

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListSavedSearchesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_saved_searches(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ListSavedSearchesResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_saved_searches(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/alerts/saved-searches")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListSavedSearchesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Remove Alert Attachment
  Remove alert attachment for the given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `attachment_id` (integer()): Identifier of alert attachment
  - `opts` (keyword): Optional parameters
    - `:alertIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:user` (String.t): Display name of the request owner

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_attachment(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def remove_attachment(connection, identifier, attachment_id, opts \\ []) do
    optional_params = %{
      :alertIdentifierType => :query,
      :user => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/alerts/#{identifier}/attachments/#{attachment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Remove Details
  Remove details of the alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `keys` ([String.t]): Comma separated list of keys to remove from the custom properties of the alert (e.g. 'key1,key2')
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:user` (String.t): Display name of the request owner
    - `:note` (String.t): Additional alert note to add
    - `:source` (String.t): Display name of the request source

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_details(Tesla.Env.client, String.t, list(String.t), keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def remove_details(connection, identifier, keys, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :user => :query,
      :note => :query,
      :source => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/alerts/#{identifier}/details")
      |> add_param(:query, :keys, keys)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Remove Tags
  Remove tags of the alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `tags` ([String.t]): Tags field of the given alert as comma seperated values (e.g. 'tag1, tag2')
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:user` (String.t): Display name of the request owner
    - `:note` (String.t): Additional alert note to add
    - `:source` (String.t): Display name of the request source

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_tags(Tesla.Env.client, String.t, list(String.t), keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def remove_tags(connection, identifier, tags, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :user => :query,
      :note => :query,
      :source => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/alerts/#{identifier}/tags")
      |> add_param(:query, :tags, tags)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Snooze Alert
  Snooze alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `body` (SnoozeAlertPayload): Request payload of snoozing alert action
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec snooze_alert(Tesla.Env.client, String.t, Opsgeniex.Model.SnoozeAlertPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def snooze_alert(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/snooze")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  UnAcknowledge Alert
  UnAcknowledge alert with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of alert which could be alert id, tiny id or alert alias
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'
    - `:body` (UnAcknowledgeAlertPayload): Request payload of unacknowledging alert action

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec un_acknowledge_alert(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def un_acknowledge_alert(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/alerts/#{identifier}/unacknowledge")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
