# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.TeamMember do
  @moduledoc """
  API calls for all endpoints tagged `TeamMember`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Add Team Member
  Adds a member to team with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `body` (AddTeamMemberPayload): Request payload of added team member
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_team_member(Tesla.Env.client, String.t, Opsgeniex.Model.AddTeamMemberPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def add_team_member(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/teams/#{identifier}/members")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Team Member
  Deletes the member of team with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `member_identifier` (String.t): User id or username of member for removal
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_team_member(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_team_member(connection, identifier, member_identifier, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/teams/#{identifier}/members/#{member_identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
