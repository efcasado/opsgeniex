# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.ScheduleOverride do
  @moduledoc """
  API calls for all endpoints tagged `ScheduleOverride`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Create Schedule Override
  Creates a schedule override for the specified user and schedule

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `body` (CreateScheduleOverridePayload): Request payload of created schedule override
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.CreateScheduleOverrideResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_schedule_override(Tesla.Env.client, String.t, Opsgeniex.Model.CreateScheduleOverridePayload.t, keyword()) :: {:ok, Opsgeniex.Model.CreateScheduleOverrideResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def create_schedule_override(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/schedules/#{identifier}/overrides")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.CreateScheduleOverrideResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Schedule Override
  Delete schedule override with given alias

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `alias` (String.t): Alias of the schedule override
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_schedule_override(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_schedule_override(connection, identifier, alias, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/schedules/#{identifier}/overrides/#{alias}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Schedule Override
  Gets schedule override details with given alias

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `alias` (String.t): Alias of the schedule override
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetScheduleOverrideResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_schedule_override(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetScheduleOverrideResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_schedule_override(connection, identifier, alias, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/overrides/#{alias}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetScheduleOverrideResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Schedule Overrides
  Returns list of schedule overrides

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.ListScheduleOverrideResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_schedule_override(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ListScheduleOverrideResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_schedule_override(connection, identifier, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/overrides")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListScheduleOverrideResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Schedule Override
  Update schedule override with given alias

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `alias` (String.t): Alias of the schedule override
  - `body` (UpdateScheduleOverridePayload): Request payload of update schedule override
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.UpdateScheduleOverrideResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_schedule_override(Tesla.Env.client, String.t, String.t, Opsgeniex.Model.UpdateScheduleOverridePayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.UpdateScheduleOverrideResponse.t} | {:error, Tesla.Env.t}
  def update_schedule_override(connection, identifier, alias, body, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/v2/schedules/#{identifier}/overrides/#{alias}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.UpdateScheduleOverrideResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
