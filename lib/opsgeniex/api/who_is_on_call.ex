# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.WhoIsOnCall do
  @moduledoc """
  API calls for all endpoints tagged `WhoIsOnCall`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Export On-Call User
  Exports personal on-call timeline of 3 months to a .ics file

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the user. Should be either 'id' or 'username' of the user
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec export_on_call_user(Tesla.Env.client, String.t, keyword()) :: {:ok, binary()} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def export_on_call_user(connection, identifier, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/on-calls/#{identifier}.ics")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Next On Calls
  Gets next on-call participants of a specific schedule

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
    - `:flat` (boolean()): Retrieves user names of all on call participants if enabled
    - `:date` (DateTime.t): Starting date of the timeline

  ### Returns

  - `{:ok, Opsgeniex.Model.GetNextOnCallResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_next_on_calls(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetNextOnCallResponse.t} | {:error, Tesla.Env.t}
  def get_next_on_calls(connection, identifier, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query,
      :flat => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/next-on-calls")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetNextOnCallResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get On Calls
  Gets current on-call participants of a specific schedule

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
    - `:flat` (boolean()): Retrieves user names of all on call participants if enabled
    - `:date` (DateTime.t): Starting date of the timeline

  ### Returns

  - `{:ok, Opsgeniex.Model.GetOnCallResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_on_calls(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetOnCallResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_on_calls(connection, identifier, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query,
      :flat => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/on-calls")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetOnCallResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List On Calls
  Lists current on-call participants of all schedules

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:flat` (boolean()): Retrieves user names of all on call participants if enabled
    - `:date` (DateTime.t): Starting date of the timeline

  ### Returns

  - `{:ok, Opsgeniex.Model.ListOnCallsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_on_calls(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListOnCallsResponse.t} | {:error, Tesla.Env.t}
  def list_on_calls(connection, opts \\ []) do
    optional_params = %{
      :flat => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/on-calls")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListOnCallsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
