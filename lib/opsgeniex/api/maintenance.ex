# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.Maintenance do
  @moduledoc """
  API calls for all endpoints tagged `Maintenance`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Cancel Maintenance
  Cancel maintenance with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Identifier of the maintenance to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cancel_maintenance(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def cancel_maintenance(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/maintenance/#{id}/cancel")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Maintenance
  Creates a new maintenance

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (CreateMaintenancePayload): Request payload of the maintenance object
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.CreateMaintenanceResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_maintenance(Tesla.Env.client, Opsgeniex.Model.CreateMaintenancePayload.t, keyword()) :: {:ok, Opsgeniex.Model.CreateMaintenanceResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def create_maintenance(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/maintenance")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.CreateMaintenanceResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Maintenance
  Delete maintenance with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Identifier of the maintenance to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_maintenance(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_maintenance(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/maintenance/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Maintenance
  Returns maintenance with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Identifier of the maintenance to be searched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.GetMaintenanceResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_maintenance(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetMaintenanceResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_maintenance(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/maintenance/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetMaintenanceResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Maintenance
  List maintenance by type

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:type` (String.t): Type of the maintenance list to be searched

  ### Returns

  - `{:ok, Opsgeniex.Model.ListMaintenanceResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_maintenance(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ListMaintenanceResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_maintenance(connection, opts \\ []) do
    optional_params = %{
      :type => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/maintenance")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListMaintenanceResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Maintenance
  Update maintenance with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Identifier of the maintenance to be searched
  - `body` (UpdateMaintenancePayload): Request payload of the maintenance object
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.UpdateMaintenanceResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_maintenance(Tesla.Env.client, String.t, Opsgeniex.Model.UpdateMaintenancePayload.t, keyword()) :: {:ok, Opsgeniex.Model.UpdateMaintenanceResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def update_maintenance(connection, id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/v1/maintenance/#{id}")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.UpdateMaintenanceResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
