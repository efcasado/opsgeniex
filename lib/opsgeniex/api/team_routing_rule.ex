# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.TeamRoutingRule do
  @moduledoc """
  API calls for all endpoints tagged `TeamRoutingRule`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Change Team Routing Rule Order
  Change the order of team routing rule with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `id` (String.t): Id of the team routing rule
  - `body` (ChangeTeamRoutingRuleOrderPayload): Request payload of change team routing rule order action
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec change_team_routing_rule_order(Tesla.Env.client, String.t, String.t, Opsgeniex.Model.ChangeTeamRoutingRuleOrderPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def change_team_routing_rule_order(connection, identifier, id, body, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/teams/#{identifier}/routing-rules/#{id}/change-order")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Team Routing Rule
  Creates a new team routing rule

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `body` (CreateTeamRoutingRulePayload): Request payload of createTeamRoutingRule
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_team_routing_rule(Tesla.Env.client, String.t, Opsgeniex.Model.CreateTeamRoutingRulePayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def create_team_routing_rule(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/teams/#{identifier}/routing-rules")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Team Routing Rule
  Delete team routing rule with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `id` (String.t): Id of the team routing rule
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_team_routing_rule(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_team_routing_rule(connection, identifier, id, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/teams/#{identifier}/routing-rules/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Team Routing Rule
  Returns team routing rule with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `id` (String.t): Id of the team routing rule
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetTeamRoutingRuleResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_team_routing_rule(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetTeamRoutingRuleResponse.t} | {:error, Tesla.Env.t}
  def get_team_routing_rule(connection, identifier, id, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/teams/#{identifier}/routing-rules/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetTeamRoutingRuleResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Team Routing Rules
  Returns list of team routing rules

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'

  ### Returns

  - `{:ok, Opsgeniex.Model.ListTeamRoutingRulesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_team_routing_rules(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListTeamRoutingRulesResponse.t} | {:error, Tesla.Env.t}
  def list_team_routing_rules(connection, identifier, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/teams/#{identifier}/routing-rules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListTeamRoutingRulesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Team Routing Rule (Partial)
  Update routing rule of the team

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of the team
  - `id` (String.t): Id of the team routing rule
  - `opts` (keyword): Optional parameters
    - `:teamIdentifierType` (String.t): Type of the identifier. Possible values are 'id' and 'name'. Default value is 'id'
    - `:body` (UpdateTeamRoutingRulePayload): Request payload of update Team Routing Rule action

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_team_routing_rule(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_team_routing_rule(connection, identifier, id, opts \\ []) do
    optional_params = %{
      :teamIdentifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v2/teams/#{identifier}/routing-rules/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
