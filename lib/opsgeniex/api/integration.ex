# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.Integration do
  @moduledoc """
  API calls for all endpoints tagged `Integration`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Authenticate Integration
  Authenticates integration with given type

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (AuthenticateIntegrationPayload): Request payload to authenticate integration
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authenticate_integration(Tesla.Env.client, Opsgeniex.Model.AuthenticateIntegrationPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def authenticate_integration(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/integrations/authenticate")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Integration
  Creates a new integration

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (Integration): Request payload of created integration
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.CreateIntegrationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_integration(Tesla.Env.client, Opsgeniex.Model.Integration.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.CreateIntegrationResponse.t} | {:error, Tesla.Env.t}
  def create_integration(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/integrations")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.CreateIntegrationResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Integration
  Delete integration with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Integration Id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_integration(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_integration(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v2/integrations/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Disable Integration
  Disable integration with given ID

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Integration Id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.DisableIntegrationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec disable_integration(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.DisableIntegrationResponse.t} | {:error, Tesla.Env.t}
  def disable_integration(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/integrations/#{id}/disable")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.DisableIntegrationResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Enable Integration
  Enable integration with given ID

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Integration Id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.EnableIntegrationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec enable_integration(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.EnableIntegrationResponse.t} | {:error, Tesla.Env.t}
  def enable_integration(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/integrations/#{id}/enable")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.EnableIntegrationResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Integration
  Returns integration with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Integration Id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.GetIntegrationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_integration(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetIntegrationResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_integration(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/integrations/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetIntegrationResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Integrations
  Returns list of integrations with given parameters

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:type` (String.t): Type of the integration (For instance, \"API\" for API Integration). If type parameter is given, the result will be filtered by type
    - `:teamId` (String.t): The ID of the team. If the team ID parameter is given, the result will be filtered by teamId
    - `:teamName` (String.t): The name of the team. If the team name parameter is given, the result will be filtered by teamName

  ### Returns

  - `{:ok, Opsgeniex.Model.ListIntegrationsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_integrations(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ListIntegrationsResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def list_integrations(connection, opts \\ []) do
    optional_params = %{
      :type => :query,
      :teamId => :query,
      :teamName => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/integrations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListIntegrationsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Integration
  Update integration with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `id` (String.t): Integration Id
  - `body` (Integration): Request payload of update integration action
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.UpdateIntegrationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_integration(Tesla.Env.client, String.t, Opsgeniex.Model.Integration.t, keyword()) :: {:ok, Opsgeniex.Model.UpdateIntegrationResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def update_integration(connection, id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/v2/integrations/#{id}")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.UpdateIntegrationResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
