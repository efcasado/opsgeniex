# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.ScheduleRotation do
  @moduledoc """
  API calls for all endpoints tagged `ScheduleRotation`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Create Schedule Rotation
  Creates a new schedule rotation

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `body` (CreateScheduleRotationPayload): Request payload of created schedule rotation
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_schedule_rotation(Tesla.Env.client, String.t, Opsgeniex.Model.CreateScheduleRotationPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def create_schedule_rotation(connection, identifier, body, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/schedules/#{identifier}/rotations")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Schedule Rotation
  Delete schedule rotation with given identifier

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `id` (String.t): Identifier of schedule rotation
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_schedule_rotation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_schedule_rotation(connection, identifier, id, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/schedules/#{identifier}/rotations/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Schedule Rotation
  Returns schedule rotation with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `id` (String.t): Identifier of schedule rotation
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetScheduleRotationResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_schedule_rotation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Opsgeniex.Model.GetScheduleRotationResponse.t} | {:ok, Opsgeniex.Model.ErrorResponse.t} | {:error, Tesla.Env.t}
  def get_schedule_rotation(connection, identifier, id, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/rotations/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetScheduleRotationResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Schedule Rotations
  Returns list of schedule rotations

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.ListScheduleRotationsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_schedule_rotations(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListScheduleRotationsResponse.t} | {:error, Tesla.Env.t}
  def list_schedule_rotations(connection, identifier, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/schedules/#{identifier}/rotations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListScheduleRotationsResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Schedule Rotation (Partial)
  Update schedule rotation with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of schedule which could be id or name
  - `id` (String.t): Identifier of schedule rotation
  - `body` (UpdateScheduleRotationPayload): Request payload of update schedule rotation action
  - `opts` (keyword): Optional parameters
    - `:scheduleIdentifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_schedule_rotation(Tesla.Env.client, String.t, String.t, Opsgeniex.Model.UpdateScheduleRotationPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_schedule_rotation(connection, identifier, id, body, opts \\ []) do
    optional_params = %{
      :scheduleIdentifierType => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/v2/schedules/#{identifier}/rotations/#{id}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
