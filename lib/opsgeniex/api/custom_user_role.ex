# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.CustomUserRole do
  @moduledoc """
  API calls for all endpoints tagged `CustomUserRole`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Create Custom User Role
  Creates a new custom user role

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (CreateCustomUserRolePayload): Request payload of created custom user role
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_custom_user_role(Tesla.Env.client, Opsgeniex.Model.CreateCustomUserRolePayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def create_custom_user_role(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v2/roles")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Custom User Role
  Deletes a custom user role using role 'id' or 'name'

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of custom user role which could be user role 'id' or 'name'
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_custom_user_role(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_custom_user_role(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/roles/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Custom User Role
  Returns custom user role with given 'id' or 'name'

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of custom user role which could be user role 'id' or 'name'
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'

  ### Returns

  - `{:ok, Opsgeniex.Model.GetCustomUserRoleResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_custom_user_role(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetCustomUserRoleResponse.t} | {:error, Tesla.Env.t}
  def get_custom_user_role(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/roles/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetCustomUserRoleResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Custom User Roles
  Returns list of custom user roles

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Opsgeniex.Model.ListCustomUserRolesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_custom_user_roles(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListCustomUserRolesResponse.t} | {:error, Tesla.Env.t}
  def list_custom_user_roles(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/roles")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListCustomUserRolesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Custom User Role
  Updates the custom user role using role 'id' or 'name'

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `identifier` (String.t): Identifier of custom user role which could be user role 'id' or 'name'
  - `opts` (keyword): Optional parameters
    - `:identifierType` (String.t): Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'name'
    - `:body` (UpdateCustomUserRolePayload): Request payload of update custom user role

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_custom_user_role(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_custom_user_role(connection, identifier, opts \\ []) do
    optional_params = %{
      :identifierType => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/v2/roles/#{identifier}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
