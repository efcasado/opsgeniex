# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Opsgeniex.Api.Policy do
  @moduledoc """
  API calls for all endpoints tagged `Policy`.
  """

  alias Opsgeniex.Connection
  import Opsgeniex.RequestBuilder

  @doc """
  Change Policy Order
  Change execution order of the policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `body` (ChangePolicyOrderPayload): Change order payload
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec change_policy_order(Tesla.Env.client, String.t, Opsgeniex.Model.ChangePolicyOrderPayload.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def change_policy_order(connection, policy_id, body, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/policies/#{policy_id}/change-order")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Create Policy
  Creates a new policy

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `body` (Policy): Payload of created policy
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.CreatePolicyResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_policy(Tesla.Env.client, Opsgeniex.Model.Policy.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.CreatePolicyResponse.t} | {:error, Tesla.Env.t}
  def create_policy(connection, body, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/policies")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Opsgeniex.Model.CreatePolicyResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Delete Policy
  Delete policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def delete_policy(connection, policy_id, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v2/policies/#{policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Disable Policy
  Disable the policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec disable_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def disable_policy(connection, policy_id, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/policies/#{policy_id}/disable")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Enable Policy
  Enable the policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec enable_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def enable_policy(connection, policy_id, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/v2/policies/#{policy_id}/enable")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Get Policy
  Used to get details of a single policy with id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.GetPolicyResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.GetPolicyResponse.t} | {:error, Tesla.Env.t}
  def get_policy(connection, policy_id, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/policies/#{policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.GetPolicyResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Alert Policies
  Returns the list of alert policies

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.ListPoliciesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_alert_policies(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListPoliciesResponse.t} | {:error, Tesla.Env.t}
  def list_alert_policies(connection, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/policies/alert")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListPoliciesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  List Notification Policies
  Returns the list of notification policies

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.ListPoliciesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_notification_policies(Tesla.Env.client, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.ListPoliciesResponse.t} | {:error, Tesla.Env.t}
  def list_notification_policies(connection, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/policies/notification")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.ListPoliciesResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end

  @doc """
  Update Policy
  Update alert policy with given id

  ### Parameters

  - `connection` (Opsgeniex.Connection): Connection to server
  - `policy_id` (String.t): Id of the requested policy
  - `body` (Policy): Payload of updated policy
  - `opts` (keyword): Optional parameters
    - `:teamId` (String.t): TeamId of policy created if it belongs to a team

  ### Returns

  - `{:ok, Opsgeniex.Model.SuccessResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_policy(Tesla.Env.client, String.t, Opsgeniex.Model.Policy.t, keyword()) :: {:ok, Opsgeniex.Model.ErrorResponse.t} | {:ok, Opsgeniex.Model.SuccessResponse.t} | {:error, Tesla.Env.t}
  def update_policy(connection, policy_id, body, opts \\ []) do
    optional_params = %{
      :teamId => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/v2/policies/#{policy_id}")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Opsgeniex.Model.SuccessResponse},
      {400, Opsgeniex.Model.ErrorResponse},
      {401, Opsgeniex.Model.ErrorResponse},
      {402, Opsgeniex.Model.ErrorResponse},
      {403, Opsgeniex.Model.ErrorResponse},
      {404, Opsgeniex.Model.ErrorResponse},
      {422, Opsgeniex.Model.ErrorResponse},
      {429, Opsgeniex.Model.ErrorResponse},
      {:default, Opsgeniex.Model.ErrorResponse}
    ])
  end
end
